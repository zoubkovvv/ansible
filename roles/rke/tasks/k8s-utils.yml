---
- name: Check Helm exist
  ansible.builtin.stat:
    path="{{ utils_path }}/helm"
  register: helm_exists

- name: Check Helm version before install or upgrade
  ansible.builtin.command:
    cmd: "{{ utils_path }}/helm version --short --client"
  register: helm_version_check
  changed_when: false
  when: helm_exists.stat.exists

#    The ansible.builtin.unarchive module unpacks an archive. It will not unpack a compressed file that does not contain an archive.
#    By default, it will copy the source file from the local system to the target before unpacking.
#    Set remote_src=yes to unpack an archive which already exists on the target.
#    If checksum validation is desired, use ansible.builtin.get_url or ansible.builtin.uri instead to fetch the file and set remote_src=yes.
#    For Windows targets, use the community.windows.win_unzip module instead.
#    
#        checksum: sha256:http://example.com/path/sha256sum.txt
#    https://get.helm.sh/helm-v3.15.2-linux-arm64.tar.gz.sha256sum

- name: Install Helm if not exists
  ansible.builtin.unarchive:
    src: "{{ helm_url }}-{{ helm_version }}-{{ os }}-{{ arch }}.tar.gz"
    dest: /usr/local/bin
    extra_opts: "--strip-components=1"
    owner: root
    group: root
    mode: 0755
    remote_src: true
  args:
    creates: /usr/local/bin/helm
  when: helm_upgrade | default(false) or not helm_exists.stat.exists

- name: Check Helm version after install or upgrade
  ansible.builtin.command:
    cmd: "{{ utils_path }}/helm version --short --client"
  register: helm_version_install
  changed_when: false

- name: Show Helm versions
  ansible.builtin.debug:
    msg:
      - Helm version before: '{{ helm_version_check.stdout if helm_exists.stat.exists else "N/A" }}'
      - Helm version after: '{{ helm_version_install.stdout if helm_version_install.stdout is defined else "N/A" }}'

- name: Check kubectl exist before install or upgrade
  ansible.builtin.stat:
    path="{{ utils_path }}/kubectl"
  register: kubectl_exists

- name: Check kubectl version
  ansible.builtin.command:
    cmd: "{{ utils_path }}/kubectl version --client"
  register: kubectl_version_check
  changed_when: false
  when: kubectl_exists.stat.exists

- name: Install kubectl if not exists
  ansible.builtin.get_url:
    url: "{{ kubectl_url }}/{{ kubectl_version }}/bin/{{ os }}/{{ arch }}/kubectl"
    dest: /usr/local/bin/kubectl
    owner: root
    group: root
    mode: 0755
    validate_certs: false
    checksum:  "sha256:{{ lookup('url', '{{ kubectl_url }}/{{ kubectl_version }}/bin/{{ os }}/{{ arch }}/kubectl.sha256') }}"
  when: kubectl_upgrade | default(false) or not kubectl_exists.stat.exists

- name: Check kubectl version after install or upgrade
  ansible.builtin.command:
    cmd: "{{ utils_path }}/kubectl version --client"
  register: kubectl_version_install
  changed_when: false

- name: Show kubectl version
  ansible.builtin.debug:
    msg:
      - kubectl version before: '{{ kubectl_version_check.stdout if kubectl_exists.stat.exists else "N/A" }}'
      - kubectl version after: '{{ kubectl_version_install.stdout if kubectl_version_install.stdout is defined else "N/A" }}'

- name: Check RKE exist
  ansible.builtin.stat:
    path="{{ utils_path }}/rke"
  register: rke_exists

- name: Check RKE version before install or upgrade
  ansible.builtin.command:
    cmd: "{{ utils_path }}/rke -v"
  register: rke_version_check
  changed_when: false
  when: rke_exists.stat.exists

- name: Install RKE if not exists
  ansible.builtin.get_url:
    url: "{{ rke_url }}/{{ rke_version }}/rke_{{ os }}-{{ arch }}"
    dest: /usr/local/bin/rke
    owner: root
    group: root
    mode: 0755
#    checksum: "sha256:{{ lookup('url', '{{ rke_url }}/{{ rke_version }}/sha256sum.txt') }}" 
  when: rke_upgrade | default(false) or not rke_exists.stat.exists

- name: Check RKE version after install or upgrade
  ansible.builtin.command:
    cmd: "{{ utils_path }}/rke -v"
  register: rke_version_install
  changed_when: false

- name: Show RKE version
  ansible.builtin.debug:
    msg:
      - RKE version before: '{{ rke_version_check.stdout if rke_exists.stat.exists else "N/A" }}'
      - RKE version after: '{{ rke_version_install.stdout if rke_version_install.stdout is defined else "N/A" }}'
