---
- name: Check Helm exist before install or upgrade
  ansible.builtin.stat:
    path="{{ utils_path }}/helm"
  register: helm_exists

- name: Check Helm version before install or upgrade
  ansible.builtin.command: >-
    {{ utils_path }}/helm version --client --template
    {{ "'{{ if .Version }}{{ .Version }}{{ else }}{{ .Client.SemVer }}{{ end }}'" }}
  register: helm_current_version
  failed_when: false
  changed_when: false
  when: helm_exists.stat.exists

- name: current version
  ansible.builtin.debug:
    msg: '{{ helm_current_version.stdout }}'
  when: helm_current_version.rc == 0

#    The ansible.builtin.unarchive module unpacks an archive. It will not unpack a compressed file that does not contain an archive.
#    By default, it will copy the source file from the local system to the target before unpacking.
#    Set remote_src=yes to unpack an archive which already exists on the target.
#    If checksum validation is desired, use ansible.builtin.get_url or ansible.builtin.uri instead to fetch the file and set remote_src=yes.
#    For Windows targets, use the community.windows.win_unzip module instead.

- name: remove existing installation
  become: true
  ansible.builtin.file:
    path: "{{ utils_path }}/helm"
    state: absent
  when:
    - helm_current_version.rc == 0
    - helm_current_version.stdout != ('v' + helm_version)

- name: Install Helm if not exists
  ansible.builtin.unarchive:
    src: "{{ helm_src }}"
    dest: /usr/local/bin
    extra_opts: "--strip-components=1"
    owner: root
    group: root
    mode: 0755
    remote_src: true
  args:
    creates: /usr/local/bin/helm
  when:
    - helm_version not in helm_current_version.stdout
    - not helm_exists.stat.exists

- name: Check Helm version after install or upgrade
  ansible.builtin.command: >-
    {{ utils_path }}/helm version --client --template
    {{ "'{{ if .Version }}{{ .Version }}{{ else }}{{ .Client.SemVer }}{{ end }}'" }}
  register: helm_version_install
  failed_when: false
  changed_when: false

- name: Show Helm versions
  ansible.builtin.debug:
    msg:
      - Helm version before: >-
             '{{ helm_current_version.stdout if helm_exists.stat.exists else "N/A" }}'
      - Helm version after: >-
             '{{ helm_version_install.stdout if helm_version_install.stdout is defined else "N/A" }}'

- name: Check kubectl exist before install or upgrade
  ansible.builtin.stat:
    path="{{ utils_path }}/kubectl"
  register: kubectl_exists

- name: Check kubectl version before install or upgrade
  ansible.builtin.command:
    cmd: "{{ utils_path }}/kubectl version --client"
  register: kubectl_existing_version
  changed_when: false
  when: kubectl_exists.stat.exists

- name: Show kubectl version
  ansible.builtin.debug:
    msg:
      - kubectl version before: >-
                '{{ kubectl_existing_version.stdout if kubectl_exists.stat.exists else "N/A" }}'

- name: Install kubectl if not exists
  ansible.builtin.get_url:
    url: "{{ kubectl_src}}"
    dest: /usr/local/bin/kubectl
    owner: root
    group: root
    mode: 0755
    validate_certs: false
    # checksum: "sha256:{{ lookup('url', '{{ kubectl_url }}/{{ kubectl_version }}/bin/{{ os }}/{{ arch }}/kubectl.sha256') }}"
    checksum: "sha256:{{ lookup('url', '{{ kubectl_src }}.sha256') }}"
  when: kubectl_version not in kubectl_existing_version.stdout or not kubectl_exists.stat.exists

- name: Check kubectl version after install or upgrade
  ansible.builtin.command:
    cmd: "{{ utils_path }}/kubectl version --client"
  register: kubectl_version_install
  changed_when: false

- name: Show kubectl version
  ansible.builtin.debug:
    msg:
      - kubectl version before: >-
                '{{ kubectl_existing_version.stdout if kubectl_exists.stat.exists else "N/A" }}'
      - kubectl version after: >-
                '{{ kubectl_version_install.stdout if kubectl_version_install.stdout is defined else "N/A" }}'

- name: Execute the command in remote shell and write the output in the specified remote file
  ansible.builtin.shell:
    cmd: kubectl completion bash > /etc/bash_completion.d/kubectl
    creates: /etc/bash_completion.d/kubectl

- name: Source .bashrc
  ansible.builtin.shell: source ~/.bashrc
  args:
    executable: /bin/bash

- name: Check k9s exist before install or upgrade
  ansible.builtin.stat:
    path="{{ utils_path }}/k9s"
  register: k9s_exists

- name: Check k9s version before install or upgrade
  ansible.builtin.command:
    cmd: "{{ utils_path }}/k9s version --client"
  register: k9s_existing_version
  changed_when: false
  when: k9s_exists.stat.exists

- name: Show k9s version
  ansible.builtin.debug:
    msg:
      - k9s version before: >-
            '{{ k9s_existing_version.stdout if k9s_exists.stat.exists else "N/A" }}'

- name: Install k9s if not exists
  ansible.builtin.get_url:
    url: "{{ k9s_src}}"
    dest: /usr/local/bin/k9s
    owner: root
    group: root
    mode: 0755
    validate_certs: false
    # checksum: "sha256:{{ lookup('url', '{{ kubectl_url }}/{{ kubectl_version }}/bin/{{ os }}/{{ arch }}/kubectl.sha256') }}"
    # checksum: "sha256:{{ lookup('url', '{{ kubectl_src }}.sha256') }}"
  when: k9s_version not in k9s_existing_version.stdout or not k9s_exists.stat.exists

- name: Check k9s version after install or upgrade
  ansible.builtin.command:
    cmd: "{{ utils_path }}/k9s version --client"
  register: k9s_version_install
  changed_when: false

- name: Show k9s version
  ansible.builtin.debug:
    msg:
      - k9s version before: >-
            '{{ k9s_existing_version.stdout if k9s_exists.stat.exists else "N/A" }}'
      - k9s version after: >-
            '{{ k9s_version_install.stdout if k9s_version_install.stdout is defined else "N/A" }}'

- name: Check RKE exist
  ansible.builtin.stat:
    path="{{ utils_path }}/rke"
  register: rke_exists

- name: Check RKE version before install or upgrade
  ansible.builtin.command:
    cmd: "{{ utils_path }}/rke -v"
  register: rke_existing_version
  changed_when: false
  when: rke_exists.stat.exists

- name: Show RKE version
  ansible.builtin.debug:
    msg:
      - rke version before: >-
            '{{ rke_existing_version.stdout if rke_exists.stat.exists else "N/A" }}'

- name: Install RKE if not exists
  ansible.builtin.get_url:
    url: "{{ rke_url }}/{{ rke_version }}/rke_{{ os }}-{{ arch }}"
    dest: /usr/local/bin/rke
    owner: root
    group: root
    mode: 0755
    # checksum: "sha256:{{ lookup('url', '{{ rke_url }}/{{ rke_version }}/sha256sum.txt') }}"
  when: rke_version not in rke_existing_version.stdout or not rke_exists.stat.exists

- name: Check RKE version after install or upgrade
  ansible.builtin.command:
    cmd: "{{ utils_path }}/rke -v"
  register: rke_version_install
  changed_when: false

- name: Show RKE version
  ansible.builtin.debug:
    msg:
      - rke version before: >-
            '{{ rke_existing_version.stdout if rke_exists.stat.exists else "N/A" }}'
      - rke version after: >-
            '{{ rke_version_install.stdout if rke_version_install.stdout is defined else "N/A" }}'
