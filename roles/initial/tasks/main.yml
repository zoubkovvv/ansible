---
# Tasks for initial role
- name: Print messages
  ansible.builtin.import_tasks: ../../../shared_tasks/print_messages.yml

- name: Ensure the user exists
  ansible.builtin.user:
    name: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    state: present
    create_home: true
    groups: sudo
    append: true
  tags:
    - initial_role

- name: Configure sudoers to enable users to execute commands
  community.general.sudoers:
    name: "{{ ansible_user }}"
    user: "{{ ansible_user }}"
    nopassword: true
    runas: 'ALL'
    commands: 'ALL'
    validation: required
  tags:
    - initial_role
    - sudoers

- name: Start services
  ansible.builtin.systemd:
    name: sshd
    enabled: true
    state: started

- name: disable root login
  ansible.builtin.replace:
    path: /etc/ssh/sshd_config
    regexp: '^PermitRootLogin.*'
    replace: 'PermitRootLogin no'

- name: enable SSH forwarding (tunnel through Bastion)
  ansible.builtin.replace:
    path: /etc/ssh/sshd_config
    regexp: '^AllowTcpForwarding.*'
    replace: 'AllowTcpForwarding yes'
    backup: true
  when: enable_ssh_tcp_forwarding|bool
  notify:
    - Restart sshd

- name: disable password login on bastion
  ansible.builtin.replace:
    path: /etc/ssh/sshd_config
    regexp: '^PasswordAuthentication.*'
    replace: 'PasswordAuthentication no'
  notify:
    - Restart sshd

- name: Add SSH key to the user's authorized_keys
  ansible.builtin.authorized_key:
    user: "{{ ansible_user }}"
    key: "{{ ansible_public_key }}"
    state: present
  tags:
    - initial_role

- name: Stop UFW service
  ansible.builtin.service:
    name: ufw
    state: stopped
    enabled: false
  tags:
    - initial_role
    - firewall

- name: Set timezone to "{{ timezone  }}"
  ansible.builtin.timezone:
    name: "{{ timezone  }}"
  tags:
    - initial_role
    - set_timezone

- name: ensure journalctl will not eat whole disk
  ansible.builtin.replace:
    path: /etc/systemd/journald.conf
    regexp: '^#SystemMaxUse.*'
    replace: "{{ ('SystemMaxUse=' + journalctl_max_disk_usage) }}"
    backup: true
  notify:
    - Restart journald
  tags:
    - initial_role
    - journalctl

- name: Update package cache and install useful packages
  ansible.builtin.apt:
    name: "{{ useful_packages }}"
    state: latest
    update_cache: true
    cache_valid_time: 3600
  tags:
    - initial_role

- name: Uninstall useless packages
  ansible.builtin.package:
    name: "{{ useless_packages }}"
    state: absent
  tags:
    - initial_role
    - uninstall_packages

- name: Update all packages
  ansible.builtin.apt:
    upgrade: dist
    update_cache: true
    cache_valid_time: 3600
    autoclean: true
    autoremove: true
  tags:
    - initial_role
  when: update_packages

- name: Set hostname
  ansible.builtin.hostname:
    name: "{{ inventory_hostname }}"
    use: systemd
  tags:
    - initial_role
    - set_hostname

- name: Ensure /etc/hostname is updated
  ansible.builtin.lineinfile:
    path: /etc/hostname
    line: "{{ inventory_hostname }}"
    create: true
  tags:
    - initial_role
    - set_hostname

- name: Ensure /etc/hosts is updated
  ansible.builtin.lineinfile:
    path: /etc/hosts
    regexp: '^127\.0\.1\.1'
    line: "127.0.1.1 {{ inventory_hostname }}"
    create: true
  tags:
    - initial_role
    - set_hostname

- name: Add or update /etc/hosts entry
  ansible.builtin.lineinfile:
    path: /etc/hosts
    state: present
    regexp: "^{{ hostvars[item].ansible_host }} "
    line: "{{ hostvars[item].ansible_host }} {{ item }}"
    backup: true
  loop: "{{ groups['rke'] }}"
